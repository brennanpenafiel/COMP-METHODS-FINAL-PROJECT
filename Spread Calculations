import pandas as pd

import pandas as pd

def spread_cover(row):
    # Determine the favorite and non-favorite team
    favorite = row['team_favorite_id']
    non_favorite = row['team_away_id'] if favorite == row['team_home_id'] else row['team_home_id']
    
    # Calculate score difference from the favorite's perspective
    if favorite == row['team_home_id']:
        score_diff = row['score_home'] - row['score_away']
    else:
        score_diff = row['score_away'] - row['score_home']
    
    # Determine if the favorite won
    favorite_won = score_diff > 0
    
    # Determine if the favorite covered the spread
    favorite_covered = score_diff > row['spread_favorite']
    
    # Determine which team covered the spread
    spread_cover = favorite if favorite_covered else non_favorite
    
    return pd.Series({
        'team_favorite_id': favorite,
        'team_not_favorite_id': non_favorite,
        'favorite_won': favorite_won,
        'spread_cover': spread_cover,
        'favorite_covered': favorite_covered
    })

# Apply the function to each row in the DataFrame
new_columns = final_df.apply(spread_cover, axis=1)

# Join the new columns to the existing DataFrame
final_df = final_df.join(new_columns, rsuffix='_new')

# Update the existing columns with the new calculated values
columns_to_update = ['team_favorite_id', 'team_not_favorite_id', 'favorite_won', 'spread_cover', 'favorite_covered']
for col in columns_to_update:
    if f'{col}_new' in final_df.columns:
        final_df[col] = final_df[f'{col}_new']
        final_df = final_df.drop(f'{col}_new', axis=1)

# Ensure team_favorite_id and team_not_favorite_id are mutually exclusive
assert not final_df.apply(lambda row: row['team_favorite_id'] == row['team_not_favorite_id'], axis=1).any(), \
    "Error: Some rows have the same team as both favorite and not favorite"

import pandas as pd

# Reset index to use 'schedule_date' as a column if needed
spreadspoke_df = spreadspoke_df.reset_index()
spreadspoke_df['schedule_date'] = pd.to_datetime(spreadspoke_df['schedule_date'])

# Calculate margin of error for each game
spreadspoke_df['predicted_score_home'] = spreadspoke_df['score_home'] + spreadspoke_df['spread_favorite']
spreadspoke_df['predicted_score_away'] = spreadspoke_df['score_away'] - spreadspoke_df['spread_favorite']

spreadspoke_df['margin_of_error_home'] = spreadspoke_df['predicted_score_home'] - spreadspoke_df['score_away']
spreadspoke_df['margin_of_error_away'] = spreadspoke_df['predicted_score_away'] - spreadspoke_df['score_home']

# Compute the absolute margin of error for each game
spreadspoke_df['absolute_margin_of_error'] = spreadspoke_df[['margin_of_error_home', 'margin_of_error_away']].abs().max(axis=1)

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the margin of error for each game
plt.figure(figsize=(14, 7))
sns.scatterplot(x='schedule_date', y='absolute_margin_of_error', data=spreadspoke_df, alpha=0.7)

plt.title('Margin of Error for Vegas Spread Predictions by Game')
plt.xlabel('Game Date')
plt.ylabel('Absolute Margin of Error')
plt.grid(True)
plt.show()

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import pandas as pd

# Assuming you have already loaded your data into spreadspoke_df
# Ensure 'schedule_date' is a datetime object
spreadspoke_df['schedule_date'] = pd.to_datetime(spreadspoke_df['schedule_date'])

# Calculate margin of error for each game
spreadspoke_df['predicted_score_home'] = spreadspoke_df['score_home'] + spreadspoke_df['spread_favorite']
spreadspoke_df['predicted_score_away'] = spreadspoke_df['score_away'] - spreadspoke_df['spread_favorite']
spreadspoke_df['margin_of_error_home'] = spreadspoke_df['predicted_score_home'] - spreadspoke_df['score_away']
spreadspoke_df['margin_of_error_away'] = spreadspoke_df['predicted_score_away'] - spreadspoke_df['score_home']
spreadspoke_df['absolute_margin_of_error'] = spreadspoke_df[['margin_of_error_home', 'margin_of_error_away']].abs().max(axis=1)

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of the dashboard
app.layout = html.Div([
    html.H1("Vegas Spread Margin of Error by Game"),
    
    # Dropdown for selecting favorite win/loss status
    dcc.Dropdown(
        id='win-loss-dropdown',
        options=[
            {'label': 'Favorite Won', 'value': 'Yes'},
            {'label': 'Favorite Lost', 'value': 'No'}
        ],
        value='Yes'  # Default value
    ),
    
    dcc.Graph(id='scatter-plot')
])

# Define callback to update graph based on favorite win/loss status selection
@app.callback(
    Output('scatter-plot', 'figure'),
    [Input('win-loss-dropdown', 'value')]
)
def update_graph(selected_status):
    # Filter data by selected favorite win/loss status
    filtered_data = spreadspoke_df[spreadspoke_df['favorite_won'] == selected_status]
    
    trace = go.Scatter(
        x=filtered_data['schedule_date'],
        y=filtered_data['absolute_margin_of_error'],
        mode='markers',
        marker=dict(size=8),
        name='Margin of Error'
    )
    
    layout = go.Layout(
        xaxis=dict(title='Game Date'),
        yaxis=dict(title='Absolute Margin of Error (%)'),
        title=f'Margin of Error for Vegas Spread Predictions - Favorite {"Won" if selected_status == "Yes" else "Lost"}',
        showlegend=True
    )
    
    return {'data': [trace], 'layout': layout}

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
